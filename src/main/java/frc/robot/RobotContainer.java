

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command.InterruptionBehavior;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.WaitCommand;
//import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;



public class RobotContainer {

  public static RobotContainer m_robotContainer = new RobotContainer();


   
    private final ClawSub m_clawSub = new ClawSub();
    private final ArmSub m_armSub = new ArmSub();
    private final DriveSub m_driveSub = new DriveSub();
   // private final ArmMoveSub m_armMoveSub = new ArmMoveSub();
    private final RampSub m_rampSub = new RampSub();
    

    
// Joysticks
private final Joystick armClawStick = new Joystick(1);
private final Joystick driveStick = new Joystick(0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
    SmartDashboard.putData(m_driveSub);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems


   
    configureButtonBindings();

    
    m_driveSub.setDefaultCommand(new Drive(m_driveSub));
    m_armSub.setDefaultCommand(new Arm(m_armSub));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    //m_chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());
     m_chooser.setDefaultOption("NO DOCK",new Auto_NoDock(m_driveSub));
     m_chooser.addOption("DOCK",new WaitCommand(0));
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons
final JoystickButton clawOpenClose = new JoystickButton(armClawStick, Constants.ClawJoystickbutton); 
clawOpenClose.whileTrue(new Claw( m_clawSub ).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        SmartDashboard.putData("ClawOpenClose",new Claw( m_clawSub ));

final JoystickButton drawbridgeDown = new JoystickButton(armClawStick, Constants.RampButton);
drawbridgeDown.whileTrue(new Ramp(m_rampSub).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        SmartDashboard.putData("drawbridgeDown",new Ramp(m_rampSub));


/* final JoystickButton drive = new JoystickButton(driveStick, Constants.teleopdrive);        
drive.whileTrue(new Drive( m_driveSub ).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        SmartDashboard.putData("TeleopDrive",new Drive(m_driveSub));
                       */
              
/* final JoystickButton armEngage = new JoystickButton(armClawStick, Constants.armEngageButton);
armEngage.whileTrue(new Arm(m_armSub).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        SmartDashboard.putData("ArmUP",new Arm(m_armSub));
 */
/*final JoystickButton homeReset = new JoystickButton(armClawStick, Constants.EncoderResetButton);
homeReset.whileTrue(new ArmEncoderReset(m_armMoveSub).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        SmartDashboard.putData("EncoderReset", new ArmEncoderReset(m_armMoveSub));

final JoystickButton armHigh = new JoystickButton(armClawStick, Constants.ArmHighButton);
armHigh.whileTrue(new ArmHigh(m_armMoveSub).withInterruptBehavior(InterruptionBehavior.kCancelSelf));  



final JoystickButton armLow = new JoystickButton(armClawStick, Constants.ArmLowButton);
armLow.whileTrue(new ArmLow(m_armMoveSub).withInterruptBehavior(InterruptionBehavior.kCancelSelf));                       

final JoystickButton armIntake = new JoystickButton(armClawStick, Constants.ArmIntakeButton);
armIntake.whileTrue(new ArmIntake(m_armMoveSub).withInterruptBehavior(InterruptionBehavior.kCancelSelf)); 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  */
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public Joystick getDriveStick() {
        return driveStick;
    }

public Joystick getArmClawStick() {
        return armClawStick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  

}

